generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  KycVerifier
  Indiviual
  Merchant
}

model User {
  id               Int                   @id @default(autoincrement())
  email            String                @unique
  password         String
  username         String                @unique
  avatar           String                @default("")
  role             Role                  @default(Indiviual)
  deletedAt        DateTime?
  lastLogin        DateTime?
  lastActiveAt     DateTime?
  emailVerifiedAt  DateTime?
  registryId       Int?                  @unique
  registry         KeyWalletRegistry?    @relation(fields: [registryId], references: [id])
  offrampProviders UserOfframpProvider[]
  nonce            String                @default(uuid())
  createdAt        DateTime              @default(now())
  region           SupportedRegion
  merchant         Merchant?
  verifier         KycVerifier?
}

// TODO: Need more details
model KycVerifier {
  id                Int                       @id @default(autoincrement())
  createdAt         DateTime                  @default(now())
  deletedAt         DateTime?
  userId            Int                       @unique
  user              User                      @relation(fields: [userId], references: [id])
  verifiedMerchants MerchantKycVerification[]
}

model MerchantKycVerification {
  id         Int         @id @default(autoincrement())
  verifierId Int
  verifier   KycVerifier @relation(fields: [verifierId], references: [id])
  merchantId Int         @unique
  merchant   Merchant    @relation(fields: [merchantId], references: [id])
  verifiedAt DateTime    @default(now())
}

// TODO: Need more details
model Merchant {
  id               Int                       @id @default(autoincrement())
  displayName      String
  registryId       Int                       @unique
  registry         KeyWalletRegistry         @relation(fields: [registryId], references: [id])
  offrampProviders MerchantOfframpProvider[]
  userId           Int                       @unique
  user             User                      @relation(fields: [userId], references: [id])
  createdAt        DateTime                  @default(now())
  verification     MerchantKycVerification?
}

model KeyWalletRegistry {
  id            Int       @id @default(autoincrement())
  commitment    String    @unique
  walletAddress String
  merchant      Merchant?
  user          User?
}

enum SupportedRegion {
  EU
}

enum OfframpProvider {
  SpherePay
}

model MerchantOfframpProvider {
  id              Int             @id @default(autoincrement())
  merchantId      Int
  merchant        Merchant        @relation(fields: [merchantId], references: [id])
  customerId      String
  bankAccountId   String
  walletAccountId String
  type            OfframpProvider
  kyb             Boolean         @default(false)

  @@unique([merchantId, type])
}

model UserOfframpProvider {
  id              Int             @id @default(autoincrement())
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
  customerId      String
  bankAccountId   String
  walletAccountId String
  offrampProvider OfframpProvider
  kyc             Boolean         @default(false)

  @@unique([userId, offrampProvider])
}
