generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  KycVerifier
  Indiviual
  Merchant
}

model User {
  id               Int                   @id @default(autoincrement())
  email            String                @unique
  password         String
  username         String                @unique
  avatar           String                @default("")
  role             Role                  @default(Indiviual)
  deletedAt        DateTime?
  lastLogin        DateTime?
  lastActiveAt     DateTime?
  emailVerifiedAt  DateTime?
  wallet           Wallet?
  registry         KeyWalletRegistry?
  offrampProviders UserOfframpProvider[]
  nonce            String                @default(uuid())
  createdAt        DateTime              @default(now())
  region           SupportedRegion
  verifier         KycVerifier?
  referrals        ReferralCode[]        @relation(name: "ReferrerCodes")
  referredBy       ReferralCode?         @relation("ReferredUser")
  points           UserRewardPoints[]
  merchant         Merchant?
}

model Merchant {
  id          Int              @id @default(autoincrement())
  displayName String
  logo        String            @default("")
  address     String
  category    MerchantCategory
  userId      Int              @unique
  user        User             @relation(fields: [userId], references: [id])
  isVerified  Boolean         @default(false)
}

enum MerchantCategory {
  Restraunt
  Groceries
}

model Wallet {
  address          String     @id
  userId           Int?       @unique
  user             User?      @relation(fields: [userId], references: [id])
  lastInteractedAt DateTime
  transferSent     Transfer[] @relation(name: "SenderWallet")
  transferReceived Transfer[] @relation(name: "ReceiverWallet")
}

model ReferralCode {
  code       String @unique
  referrerId Int
  referrer   User   @relation("ReferrerCodes", fields: [referrerId], references: [id])
  refereeId  Int?   @unique
  referee    User?  @relation("ReferredUser", fields: [refereeId], references: [id])
}

model KycVerifier {
  id            Int                   @id @default(autoincrement())
  createdAt     DateTime              @default(now())
  deletedAt     DateTime?
  userId        Int                   @unique
  user          User                  @relation(fields: [userId], references: [id])
  verifiedUsers UserKycVerification[]
}

model UserKycVerification {
  id         Int               @id @default(autoincrement())
  verifierId Int
  verifier   KycVerifier       @relation(fields: [verifierId], references: [id])
  registryId Int               @unique
  registry   KeyWalletRegistry @relation(fields: [registryId], references: [id])
  verifiedAt DateTime          @default(now())
}

//TODO: User partial indexing to get database level uniqueness
model KeyWalletRegistry {
  id           Int                  @id @default(autoincrement())
  vpa          String
  commitment   String
  user         User                 @relation(fields: [userId], references: [id])
  userId       Int                  @unique
  verification UserKycVerification?
}

enum SupportedRegion {
  EU
  IN
  BR
  SG
}

enum OfframpProvider {
  SpherePay
}

model UserOfframpProvider {
  id              Int             @id @default(autoincrement())
  userId          Int
  user            User            @relation(fields: [userId], references: [id])
  customerId      String
  bankAccountId   String
  walletAccountId String
  offrampProvider OfframpProvider
  kyc             Boolean         @default(false)

  @@unique([userId, offrampProvider])
}

enum TokenType {
  USDC
}

enum TransferStatus {
  Success
  Pending
  Rejected
}

model Transfer {
  id                    Int            @id @default(autoincrement())
  senderWalletAddress   String?
  senderWallet          Wallet?        @relation(name: "SenderWallet", fields: [senderWalletAddress], references: [address])
  amount                Int
  tokenType             TokenType
  reference             String?
  status                TransferStatus
  signature             String?        @unique
  createdAt             DateTime       @default(now())
  receiverWalletAddress String
  receiverWallet        Wallet         @relation(name: "ReceiverWallet", fields: [receiverWalletAddress], references: [address])
}

enum RewardPointTask {
  MerchantOnboarding
  EarlyUser
}

model RewardPointSystem {
  id     Int                @id @default(autoincrement())
  task   RewardPointTask    @unique
  points Int
  users  UserRewardPoints[]
}

model UserRewardPoints {
  id       Int               @id @default(autoincrement())
  userId   Int
  user     User              @relation(fields: [userId], references: [id])
  rewardId Int
  reward   RewardPointSystem @relation(fields: [rewardId], references: [id])
  targetId Int?
}
